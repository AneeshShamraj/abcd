import java.util.Arrays;
import java.util.Scanner;


/*
 * Exclusively By Puneet
 */

public class HammingCode {
    public static void main(String[] args) {
        String s;
        Scanner sc=new Scanner(System.in);

        System.out.println("Enter the Data to be sent: ");
        s=sc.next();
        int m=s.length();
        int p=1;

        while(Math.pow(2, p)<m+p+1)
            p++;

        String encodedString=generateCode(s,m,p);

        System.out.println(encodedString);

        System.out.println("Enter the bit number to be changed (-1 if nothing to be changed): ");

        int no=sc.nextInt();

        if(no==-1){
            for (int i = 0; i < encodedString.length(); i++) {
                System.out.print(encodedString.charAt(i)+" ");
            }


            System.out.println();
            System.out.println("Checking for any errors..");
            System.out.println("The value of r is: 0000");
            System.out.println("Hence no error detected");
        }
        else{
            char[] senderMessage=encodedString.toCharArray();

            senderMessage[senderMessage.length-no]^=1;

            System.out.println("The sender's message sent is: ");
            for (int i = 0; i < senderMessage.length; i++) {
                System.out.print(senderMessage[i]+" ");

            }

            String str=errorCodePos(senderMessage);

            System.out.println("Error at position in binary format is: "+str);

            int idx=toDec(str);

            System.out.println("Error is detected at position:"+idx);

            System.out.println("corrected codword will be: ");

            senderMessage[senderMessage.length-idx]^=1;

            for (int i = 0; i < senderMessage.length; i++) {
                System.out.print(senderMessage[i]+" ");
            }

            System.out.println();


        }


    }

    private static int toDec(String str) {

        int dec=0;
        int x=0;

        for (int i = str.length()-1; i>=0; i--) {
            int digit=str.charAt(i)-'0';

            dec=dec+((int)Math.pow(2, x++)*digit);
        }
        return dec;
    }

    private static String errorCodePos(char[] senderMessage) {

        StringBuilder str=new StringBuilder();

        int pow=0;

        while(Math.pow(2,pow)<senderMessage.length){
            int num=(int)Math.pow(2, pow++);

            int idx=senderMessage.length-num;
            boolean flag=true;
            int sel=0;
            int xor=0;

            for (int j = idx; j >= 0; j--) {
                 if(sel==num)
                        flag=false;

                    if(flag){
                        
                        xor^=senderMessage[j]-'0';
                        sel++;
                        
                    }
                    else{
                        sel--;
                        if(sel==0)
                            flag=true;

                    }
            }

            str.append(xor);
        }

        return str.reverse().toString();
    }

    private static String generateCode(String s, int m, int p) {
        
        char[] arr=new char[m+p];

        int x=0;
        int e=0;

        while(Math.pow(2,x)<arr.length)
            arr[arr.length-(int)Math.pow(2,x++)]='#';

        for (int i = 0; i < arr.length; i++) {
            if(arr[i]!='#'){
                arr[i]=s.charAt(e++);
            }
        }

        System.out.println(Arrays.toString(arr));

        for (int i = arr.length-1; i >=0; i--) {
            if(arr[i]=='#'){
             
                boolean flag=true;
                int sel=1;
                int xor=0;

                for (int j = i-1; j>=0; j--) {
                    if(sel==arr.length-i)
                        flag=false;

                    if(flag){
                        if(arr[j]!='#'){
                        xor^=arr[j]-'0';
                        sel++;
                        }
                    }
                    else{
                        sel--;
                        if(sel==0)
                            flag=true;

                    }
                }
               arr[i]=(char)(xor+'0');
            }
        }


        return String.valueOf(arr);
    }
    
}
